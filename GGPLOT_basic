

# ce date sunt in R
data()



?BOD

# ggplot 

ggplot(data = BOD,
       mapping = aes( x= Time, y = demand))+
  geom_line(colour= "black")



ggplot(BOD, aes( x = Time, y = demand)) + 
  geom_point(size = 3) + 
  geom_line (colour = "red")

co2
names()

#
data()

##################

plot (weight ~ water, data = .... ) #   inaltimea este o functie a apaei 


CO2 %>%             #pipe din co2  
  ggplot(aes(conc, uptake,
             colour = Treatment)) +    # culoarea e o functie a tratamentului culoarea e tratamentul
  geom_point(size = 3, alpha = 0.5) +   # alpha il face transparent
  geom_smooth  (method = lm, se = TRUE)+ # geom smooth face un smooth line / METHOD - ce tip de smoothing / se inseamna daca afiseaza intevalul de incredere 
  facet_wrap(~Type)+  # DESPARTIRE GRAFICE IN PANOURI PE BAZA UNEI VARIABILE
  labs(title = "co2", # schimbare titlu
       colour = "ba",)+ #schimbare nume la legenda
  theme_bw()+   # e o legenda
xlim(0, 100) +   # aici setezi limita pe axa 
  ylim(0, 50) 

#######################
CO2 %>%
  ggplot(aes(Treatment, uptake))+
  geom_boxplot()+ #creare boxplot
geom_point( alpha = 0.5,
  aes(size = conc,
               colour = Plant))+ 
  facet_wrap(~Type)+
  coord_flip()+      # intoacere grafic
theme_bw()+
labs(title = "Copii",
     colour= "a",  size = "b") # colour schimba primba legenda / size schimba a 2 a legenda 

###############
view(mpg)

mpg %>%
  filter ( cty < 25) %>%              # alegi, filtru, anumite valori 
  ggplot(aes(displ, cty ))+
  geom_point(size= 3, aes( colour = drv,   # culoarea este varabila drv
                  size = trans,       # fiecare marime este variabila trans
                  alpha = 0.5))+
  geom_smooth(method = lm, se = TRUE)+
  facet_wrap(~year, nrow = 1)+
labs (x = "engi",
      y = "mg",
      title="g",
      colour= "b",
      size= "2")+
  theme_bw()





#################################



msleep %>%
  drop_na(vore) %>% # eliminare NA DAOR DINTRO VARIABILA!!
  ggplot(aes(fct_infreq(vore)))+  # de la mic la mare
  coord_flip()+ # intoarce grafic 
  geom_bar(fill= "red")






###########


mpg




msleep %>%
  drop_na(vore) %>% # eliminare NA DAOR DINTRO VARIABILA!!
  ggplot(aes(fct_infreq(vore)))+  # de la mic la mare
  coord_flip()+
  geom_histogram(fill= "red")



library(tidyverse)
#########
view(gapminder)


gapminder %>%
  filter(contintent %in% c ("Africa", "Europe"))+ ### ALEGEREA DOAR A ACESTORA
  filter(gdpPercap <3000) %>%
  ggplot*aes(gdpPercap,
             lifeExp,
             size = pop,
             color = yea))+
  geom_point()+
  facet_wrap (~continent)+
  labs()





######
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  facet_wrap(~ class, nrow = 2)




###### face subseturi doar pe randuri

ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) +
  facet_grid(drv ~ .)
###### face subseturi doar pe coloane
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) +
  facet_grid(. ~ cyl)

#### immparte subploturi pe 2 randuri


ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  facet_wrap(~ class, nrow = 2)

#### face un smoothing pe baza la 3 linii + puncte 
ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, colour = drv))+
  geom_point(aes(displ, hwy, colour = drv))




# NU PUNE LEGENDA

mpg %>%
ggplot() + 
  geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, colour = drv))+
  geom_point(aes(displ, hwy, colour = drv),
  show.legend = FALSE
)



# FILTREAZA DATELE
mpg %>%
  ggplot(aes(displ, hwy))+
  geom_point(aes(color=class)) +
  geom_smooth(data= filter(mpg, class == "subcompact"), se = FALSE) ## filtrare data / == daca este egala clasa cu subcompact, atundici filtrezi / e o condotoie/ se= false, se sterge 






# 

mpg %>%
  ggplot(aes(displ, hwy)) +
  geom_point(size = 3)+
  geom_smooth(aes(linetype=drv),colour= "blue",  se = F)
  


# box plot

ggplot(diamonds) + 
  geom_bar(mapping = aes(x = cut))

# pentru fiecare box plot,
ggplot(diamonds) +
  stat_count (aes ( x = cut))


# CREARE BPLOX PLOT CU frecventa 
demo <- tribble( 
  ~cut,         ~freq,    # Se pune ~ in cazul asta pentru a marca numele coloanelor cand creezi un tip de tabel ( tibble)
  "Fair",       1610,
  "Good",       4906,
  "Very Good",  12082,
  "Premium",    13791,
  "Ideal",      21551
)
ggplot(demo) + 
  geom_bar(mapping = aes(x = cut, y = freq), stat = "identity")






#
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, y = stat(prop), group = 1)) # stat calculeaza proportia in loc de valorile absolute

#cum pui etichete
ggplot(data = diamonds, aes(x = cut)) + 
  geom_bar(aes(y = stat(prop), group = 1)) +
  geom_text(aes(label = scales::percent(stat(prop)), y = stat(prop), group = 1), # le pui geom_Text
            stat = "count", vjust = -0.5) # vjust = vertical justification






# sa fezi min, max, si mediana
ggplot(data = diamonds) + 
  stat_summary(
    mapping = aes(x = cut, y = depth),
    fun.min = min,
    fun.max = max,
    fun = median
  )




ggplot(data, aes(x = Ani)) +
  # Puncte pentru Cifra Afaceri (colorată pe baza variabilei 'Cifra')
  geom_point(aes(y = Cifra, color = "Cifra Afaceri")) +  
  # Curba de ajustare pentru Cifra Afaceri
  geom_smooth(aes(y = Cifra, color = "Cifra Afaceri"), se = F) +  
  # Linia pentru Cifra Afaceri
  geom_line(aes(y = Cifra, color = "Cifra Afaceri")) +   
  # Puncte pentru Profit (colorate pe baza variabilei 'Profit')
  geom_point(aes(y = Profit, color = "Profit")) +  
  # Linia pentru Profit
  geom_line(aes(y = Profit, color = "Profit")) +   
  # Curba de ajustare pentru Profit
  geom_smooth(aes(y = Profit, color = "Profit"), se = F) +  
  ylab("RON") +
  xlab("ANI") +
  # Scale personalizată pentru axa Y
  scale_y_continuous(labels = scales::comma, 
                     breaks = seq(min(data$Profit), max(data$Cifra), by = 100000000)) +  
  # Definirea culorilor și legendei
  scale_color_manual(name = "Indicator", 
                     values = c("Cifra Afaceri" = "blue", "Profit" = "red"))


















baril$Perioada <- as.Date(baril$Perioada, format = "%m/%d/%Y") #trebuie transformata in date


baril<-read.csv("C:/Users/emyst/Desktop/1.csv")  #trebuie transformata in date

ggplot(baril, aes(x = Perioada, y = pret)) +
  geom_line(color = "blue") +
  labs(title = "Evoluția prețului barilului de petrol",
       x = "Ani",
       y = "Preț (USD/baril)") +
  theme_minimal()+
  scale_x_date(limits = as.Date(c("1987-05-20", "2025-12-31")),
               date_breaks = "1 year",
               date_labels = "%y") 
